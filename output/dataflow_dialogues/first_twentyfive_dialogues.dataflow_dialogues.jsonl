{"dialogue_id":"8c112de4-0c61-43b1-b437-8e176fed39b6","turns":[{"lispress":"(Yield (Tomorrow))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Date) Yield :output ^Date (Tomorrow))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"what date is tomorrow?","tokens":["what","date","is","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Tomorrow's date is February 5, 2019.","tokens":["Tomorrow","'s","date","is","February","5",",","2019","."]},"tags":{"original_lispress":"(Yield :output (Tomorrow))","do-not-train":""}},{"lispress":"(Yield (Date.dayOfWeek (Tomorrow)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DayOfWeek) Yield :output ^DayOfWeek (Date.dayOfWeek :date ^Date (Tomorrow)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"What day of the week is tomorrow?","tokens":["What","day","of","the","week","is","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"Tomorrow is Wednesday.","tokens":["Tomorrow","is","Wednesday","."]},"tags":{"original_lispress":"(Yield :output (:dayOfWeek (Tomorrow)))","do-not-train":""}},{"lispress":"(PleasantryCalendar)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryCalendar)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"please help me","tokens":["please","help","me"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can help you create, update, and delete events on your calendar. You can also ask me about your schedule.","tokens":["I","can","help","you","create",",","update",",","and","delete","events","on","your","calendar",".","You","can","also","ask","me","about","your","schedule","."]},"tags":{"original_lispress":"(PleasantryCalendar)","do-not-train":""}}],"tags":{}}
{"dialogue_id":"4e8459ef-e9b4-418f-b785-a711acb2da1a","turns":[{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"R House\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"R House\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Hi Does R House have a full bar?","tokens":["Hi","Does","R","House","have","a","full","bar","?"]},"agent_utterance":{"described_entities":["entity@1248994533"],"original_text":"I'm unable to find whether R. House has a full bar. You'll have to contact them.","tokens":["I","'m","unable","to","find","whether","R.","House","has","a","full","bar",".","You","'ll","have","to","contact","them","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"R House\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Walk-ons in Mobile\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Walk-ons in Mobile\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Does Walk-ons in Mobile have a full bar?","tokens":["Does","Walk","-","ons","in","Mobile","have","a","full","bar","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Walk-ons in Mobile\"))))))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.FullBar) (singleton (PlaceSearchResponse.results (FindPlaceMultiResults (LocationKeyphrase.apply \"Pizza and Kabob in Folsom\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.FullBar) :place ^Place (^(Place) singleton :list ^(List Place) (PlaceSearchResponse.results :obj ^PlaceSearchResponse (FindPlaceMultiResults :place ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Pizza and Kabob in Folsom\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Does Pizza and Kabob in Folsom have a full bar?","tokens":["Does","Pizza","and","Kabob","in","Folsom","have","a","full","bar","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes.","tokens":["Yes","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"FullBar\") :place (singleton (:results (FindPlaceMultiResults :place #(LocationKeyphrase \"Pizza and Kabob in Folsom\"))))))"}}],"tags":{}}
{"dialogue_id":"66c82f2d-8f6f-4aa2-b93d-1eb14b4d34a9","turns":[{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"yes, iam busy set remainder my events","tokens":["yes",",","iam","busy","set","remainder","my","events"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (Event.start_? (DateTime.date_? (?= (NextDOW (Friday))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (NextDOW :dow ^DayOfWeek (Friday))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make an event for Friday?","tokens":["Can","you","make","an","event","for","Friday","?"]},"agent_utterance":{"described_entities":["entity@1503946306"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (NextDOW :dow #(DayOfWeek \"FRIDAY\"))))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEvent 2L (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEvent :index ^Long 2L :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"The 2nd one is mostly look good for me.","tokens":["The","2","nd","one","is","mostly","look","good","for","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEvent :index #(Number 2) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks to for you greatfull job to me","tokens":["Thanks","to","for","you","greatfull","job","to","me"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"beach trip\")) (Event.location_? (?= (LocationKeyphrase.apply \"Coney Island\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"beach trip\")) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Coney Island\")))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Actually, could you create a new event called \"beach trip\" at Coney Island?","tokens":["Actually",",","could","you","create","a","new","event","called","\"","beach","trip","\"","at","Coney","Island","?"]},"agent_utterance":{"described_entities":["entity@1078046934"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :location (?= #(LocationKeyphrase \"Coney Island\")) :subject (?= #(String \"beach trip\"))))))"}}],"tags":{}}
{"dialogue_id":"a3e42aa2-5bb6-4d29-b0b5-964e78a967bd","turns":[{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.subject_? (?~= \"staff meeting\")) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"staff meeting\")) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my next staff meeting scheduled for?","tokens":["When","is","my","next","staff","meeting","scheduled","for","?"]},"agent_utterance":{"described_entities":[],"original_text":"The next event matching \"staff meeting\" is on June 2nd at 10:00 AM.","tokens":["The","next","event","matching","\"","staff","meeting","\"","is","on","June","2","nd","at","10",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :subject (?~= #(String \"staff meeting\"))) :number #(Number 1))))"}},{"lispress":"(let (x0 (Event.end (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint)))))) (Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateAfterTime (DateTime.date x0) (^(Event) EmptyStructConstraint) (DateTime.time x0))))) 0L)))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (Event.end :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint)))))) ^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateAfterTime :date ^Date (DateTime.date :obj x0) :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :time ^Time (DateTime.time :obj x0))))) :y ^Long 0L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Is there a meeting after that?","tokens":["Is","there","a","meeting","after","that","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on June 2nd after 10:45.","tokens":["No",",","I","did","n't","find","any","events","on","June","2","nd","after","10",":","45","."]},"tags":{"original_lispress":"(let (x0 (:end (Execute :intension (refer (extensionConstraint (Constraint[Event])))))) (Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateAfterTime :date (:date x0) :event (Constraint[Event]) :time (:time x0))))) #(Number 0))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (^(Event) EmptyStructConstraint)) (Afternoon))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)) :timeRange ^(Constraint Time) (Afternoon))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Are there any meetings in the afternoon that day?","tokens":["Are","there","any","meetings","in","the","afternoon","that","day","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on June 2nd in the afternoon.","tokens":["No",",","I","did","n't","find","any","events","on","June","2","nd","in","the","afternoon","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :event (Constraint[Event])) :timeRange (Afternoon))))) #(Number 0)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Mark\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Mark\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you send an invite to Mark for this","tokens":["Can","you","send","an","invite","to","Mark","for","this"]},"agent_utterance":{"described_entities":["entity@1701428647"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Mark\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"That looks correct to me.","tokens":["That","looks","correct","to","me","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"Staff Meeting\" to be Mark.","tokens":["I","'ve","changed","\"","Staff","Meeting","\"","to","be","Mark","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"d635963a-926f-4b89-98ab-17f08056f572","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"meeting with the lecture\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"meeting with the lecture\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is the meeting with the lecture?","tokens":["When","is","the","meeting","with","the","lecture","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's on April 11th at 2:00 PM.","tokens":["It","'s","on","April","11","th","at","2",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"meeting with the lecture\"))))))))"}},{"lispress":"(let (x0 (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.start_? (DateTime.date_? (?= (nextDayOfWeek (DateTime.date (Event.start x0)) (Thursday)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (nextDayOfWeek :date ^Date (DateTime.date :obj ^DateTime (Event.start :obj x0)) :day ^DayOfWeek (Thursday)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you reschedule it to the following Thursday?","tokens":["Can","you","reschedule","it","to","the","following","Thursday","?"]},"agent_utterance":{"described_entities":["entity@2080300388"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(let (x0 (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (nextDayOfWeek (:date (:start x0)) #(DayOfWeek \"THURSDAY\")))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"lori\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"lori\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"yep and add lori to it","tokens":["yep","and","add","lori","to","it"]},"agent_utterance":{"described_entities":["entity@1137269941"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"lori\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"looks pretty good","tokens":["looks","pretty","good"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"meeting with the lecture\" to be lori.","tokens":["I","'ve","changed","\"","meeting","with","the","lecture","\"","to","be","lori","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"OK","tokens":["OK"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"7127a34f-3f16-4757-a6cf-d000098b5f5f","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"oil change\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"oil change\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When do I have the oil change on my car scheduled for?","tokens":["When","do","I","have","the","oil","change","on","my","car","scheduled","for","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on March 15th at 11:00 AM.","tokens":["It","starts","on","March","15","th","at","11",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"oil change\"))))))))"}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateTime (DateAtTimeWithDefaults (MD 15L (March)) (NumberAM 11L)) (Event.subject_? (?~= \"oil change\"))))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toMinutes 30))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateTime :dateTime ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 15L :month ^Month (March)) :time ^Time (NumberAM :number ^Long 11L)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"oil change\"))))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toMinutes :minutes ^Number 30))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Add a extra 30 minutes to oil change on March 15 at 11:00 am.","tokens":["Add","a","extra","30","minutes","to","oil","change","on","March","15","at","11",":","00","am","."]},"agent_utterance":{"described_entities":["entity@1205196654"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateTime :dateTime (DateAtTimeWithDefaults :date (MD :day #(Number 15) :month #(Month \"MARCH\")) :time (NumberAM :number #(Number 11))) :event (Constraint[Event] :subject (?~= #(String \"oil change\")))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toMinutes #(Number 30.0)))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"You got it!","tokens":["You","got","it","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"oil change\" to be for 1 hour.","tokens":["I","'ve","changed","\"","oil","change","\"","to","be","for","1","hour","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (MD 15L (March)) (NumberPM 12L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"get my tires changed\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 2L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 15L :month ^Month (March)) :time ^Time (NumberPM :number ^Long 12L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"get my tires changed\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 2L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I also need to get my tires changed from 12:00 to 2:00 pm on Friday March 15.","tokens":["I","also","need","to","get","my","tires","changed","from","12",":","00","to","2",":","00","pm","on","Friday","March","15","."]},"agent_utterance":{"described_entities":["entity@651126687"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (MD :day #(Number 15) :month #(Month \"MARCH\")) :time (NumberPM :number #(Number 12)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 2)))) :start (?= x0) :subject (?= #(String \"get my tires changed\")))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Perfect!","tokens":["Perfect","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"11b9b018-5073-4b01-980c-169d29e31721","turns":[{"lispress":"(Yield (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Gavin\")))) (WeekOfDateNew (Today)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Gavin\")))) :range ^(Constraint Date) (WeekOfDateNew :date ^Date (Today)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Search for any meetings with Gavin for this week.","tokens":["Search","for","any","meetings","with","Gavin","for","this","week","."]},"agent_utterance":{"described_entities":[],"original_text":"I didn't find any events with Gavin this week.","tokens":["I","did","n't","find","any","events","with","Gavin","this","week","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Gavin\")))) :range (WeekOfDateNew :date (Today)))))"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"gavin\")))) (ThisWeek)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"gavin\")))) :range ^(Constraint Date) (ThisWeek)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"where is my meeting with gavin this week","tokens":["where","is","my","meeting","with","gavin","this","week"]},"agent_utterance":{"described_entities":[],"original_text":"The event with gavin this week is located at toilet.","tokens":["The","event","with","gavin","this","week","is","located","at","toilet","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"gavin\")))) :range (ThisWeek)))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.location_? (?= (LocationKeyphrase.apply \"Walmart\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Walmart\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Great change this location to Walmart","tokens":["Great","change","this","location","to","Walmart"]},"agent_utterance":{"described_entities":["entity@1504411967"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"Walmart\"))))))"}},{"lispress":"(Yield (FindEventWrapperWithDefaults (& (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sam\")))) (EventDuringRange (^(Event) EmptyStructConstraint) (ThisWeek)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(QueryEventResponse) Yield :output ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sam\")))) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) EmptyStructConstraint) :range ^(Constraint Date) (ThisWeek)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Can you search for any plans I have this week with Sam?","tokens":["Can","you","search","for","any","plans","I","have","this","week","with","Sam","?"]},"agent_utterance":{"described_entities":[],"original_text":"I found one event with Sam this week. It's \"Meeting with Sam and Megan Bowen\" on Thursday from 9:00 to 9:30 AM.","tokens":["I","found","one","event","with","Sam","this","week",".","It","'s","\"","Meeting","with","Sam","and","Megan","Bowen","\"","on","Thursday","from","9",":","00","to","9",":","30","AM","."]},"tags":{"original_lispress":"(Yield :output (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sam\"))) :nonEmptyBase (EventDuringRange :event (Constraint[Event]) :range (ThisWeek)))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (?= (MD 29L (March))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 29L :month ^Month (March))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"change this meeting to friday 29 march","tokens":["change","this","meeting","to","friday","29","march"]},"agent_utterance":{"described_entities":["entity@1639994484"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 29) :month #(Month \"MARCH\"))))))))"}}],"tags":{}}
{"dialogue_id":"422b8ef0-6a30-4880-a649-e3455ce91971","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"dentist appointment\")) (FullMonthofMonth (March))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dentist appointment\")) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (March))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my dentist appointment in March?","tokens":["When","is","my","dentist","appointment","in","March","?"]},"agent_utterance":{"described_entities":[],"original_text":"It starts on March 18th at 1:00 PM.","tokens":["It","starts","on","March","18","th","at","1",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"dentist appointment\"))) :range (FullMonthofMonth :month #(Month \"MARCH\"))))))))"}},{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Set a reminder to call my sisters and thank them for that comfy chair they got me.","tokens":["Set","a","reminder","to","call","my","sisters","and","thank","them","for","that","comfy","chair","they","got","me","."]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}}],"tags":{}}
{"dialogue_id":"a7d53aa7-2b31-4153-90d3-0af9149a6c97","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"game\")) (ThisWeekend))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"game\")) :range ^(Constraint Date) (ThisWeekend))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Is there a game this weekend?","tokens":["Is","there","a","game","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. I didn't find any events on Sunday the 28th.","tokens":["No",".","I","did","n't","find","any","events","on","Sunday","the","28","th","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"game\"))) :range (ThisWeekend))))) #(Number 0)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"dinner\")) (Event.start_? (?= (DateAtTimeWithDefaults (Execute (refer (extensionConstraint (^(Date) EmptyStructConstraint)))) (NumberPM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"dinner\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (^(Date) Execute :intension ^(CalflowIntension Date) (^(Date) refer :constraint ^(Constraint (CalflowIntension Date)) (^(Date) extensionConstraint :constraint ^(Constraint Date) (^(Date) EmptyStructConstraint)))) :time ^Time (NumberPM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you make one for dinner at 6pm","tokens":["Can","you","make","one","for","dinner","at","6","pm"]},"agent_utterance":{"described_entities":["entity@102731556"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (Execute :intension (refer (extensionConstraint (Constraint[Date])))) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"dinner\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"rosy\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"rosy\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"invite rosy to the dinner","tokens":["invite","rosy","to","the","dinner"]},"agent_utterance":{"described_entities":["entity@610982962"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"rosy\"))))))))))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Rosy\")))) (FullMonthofMonth (Date.month (Today))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Rosy\")))) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (Date.month :obj ^Date (Today))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Do I have any plan with Rosy this month?","tokens":["Do","I","have","any","plan","with","Rosy","this","month","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. I didn't find any events on your calendar.","tokens":["No",".","I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Rosy\")))) :range (FullMonthofMonth :month (:month (Today))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"doctor's\")) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor's\")) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Do I have any doctor's appointments next week?","tokens":["Do","I","have","any","doctor","'s","appointments","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. I didn't find any events named \"doctor's\" next week.","tokens":["No",".","I","did","n't","find","any","events","named","\"","doctor","'s","\"","next","week","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"doctor's\"))) :range (NextWeekList))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"836049e5-835b-4eb3-958a-7da53af5c44d","turns":[{"lispress":"(Yield (Event.start (FindNumNextEvent (Event.subject_? (?~= \"lunch\")) 1L)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (FindNumNextEvent :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"lunch\")) :number ^Long 1L)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"can you see when my next meeting is involving a lunch?","tokens":["can","you","see","when","my","next","meeting","is","involving","a","lunch","?"]},"agent_utterance":{"described_entities":[],"original_text":"Your next event matching \"lunch\" is on Monday the 11th at 12:00 PM.","tokens":["Your","next","event","matching","\"","lunch","\"","is","on","Monday","the","11","th","at","12",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (FindNumNextEvent :constraint (Constraint[Event] :subject (?~= #(String \"lunch\"))) :number #(Number 1))))"}}],"tags":{}}
{"dialogue_id":"63206dcb-22be-42de-99ac-0017d04d3921","turns":[{"lispress":"(FenceReminder)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceReminder)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Remind me of the first flight to london","tokens":["Remind","me","of","the","first","flight","to","london"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Sorry, I can't do reminders.","tokens":["Sorry",",","I","ca","n't","do","reminders","."]},"tags":{"original_lispress":"(FenceReminder)"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (^(Event) EmptyStructConstraint))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have any events friday?","tokens":["Do","I","have","any","events","friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events tomorrow.","tokens":["No",",","I","did","n't","find","any","events","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event]))))) #(Number 0)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"ok fine thank you","tokens":["ok","fine","thank","you"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Jeffs pizza party\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (NumberPM 6L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Jeffs pizza party\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (NumberPM :number ^Long 6L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Set up an event for friday named Jeffs pizza party at 6pm","tokens":["Set","up","an","event","for","friday","named","Jeffs","pizza","party","at","6","pm"]},"agent_utterance":{"described_entities":["entity@805101610"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (NumberPM :number #(Number 6)))) :subject (?= #(String \"Jeffs pizza party\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"yeah much better","tokens":["yeah","much","better"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"ef91f769-9eb5-4c8f-86cc-7c444b68a087","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.attendees_? (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jerri Skinner\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jerri Skinner\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"What time is my appointment with Jerri Skinner on Friday?","tokens":["What","time","is","my","appointment","with","Jerri","Skinner","on","Friday","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events with Jerri Skinner.","tokens":["I","did","n't","find","any","events","with","Jerri","Skinner","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :attendees (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jerri Skinner\"))))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (NextTime (NumberAM 9L)))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jerri Skinner\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (NextTime :time ^Time (NumberAM :number ^Long 9L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jerri Skinner\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Can you add an appointment with Jerri Skinner at 9 am?","tokens":["Can","you","add","an","appointment","with","Jerri","Skinner","at","9","am","?"]},"agent_utterance":{"described_entities":["entity@2085359578"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jerri Skinner\")))))) :start (?= (NextTime :time (NumberAM :number #(Number 9))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.duration_? (?= (toHours 2))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 2))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"I need it to last 2 hours.","tokens":["I","need","it","to","last","2","hours","."]},"agent_utterance":{"described_entities":["entity@1722739284"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :duration (?= (toHours #(Number 2)))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"good, thanks.","tokens":["good",",","thanks","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"5c7798cd-c1fd-4895-844d-91c2e39cd01c","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L)))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Sally\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"May\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Johnny\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Sally\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"May\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Johnny\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you schedule an appointment with Sally, May, and Johnny tomorrow at 3PM","tokens":["Can","you","schedule","an","appointment","with","Sally",",","May",",","and","Johnny","tomorrow","at","3","PM"]},"agent_utterance":{"described_entities":["entity@1338436491"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Sally\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"May\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Johnny\"))))))) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Yes it is.","tokens":["Yes","it","is","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"JEsse\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Abby\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"JEsse\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Abby\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":true,"turn_index":2,"user_utterance":{"original_text":"That looks great. Can you add JEsse, Kim, and Abby to it?","tokens":["That","looks","great",".","Can","you","add","JEsse",",","Kim",",","and","Abby","to","it","?"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"None of the events mentioned are.","tokens":["None","of","the","events","mentioned","are","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"JEsse\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Abby\")))))))))))","do-not-train":""}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Steven\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Steven\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Add Steven to it, please","tokens":["Add","Steven","to","it",",","please"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any matching events.","tokens":["I","did","n't","find","any","matching","events","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Steven\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"That is okay","tokens":["That","is","okay"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"8a1e81a8-5855-4d64-aaf5-19216ce14d8d","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"apartment viewing\")) (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberAM 10L))))) (Event.location_? (?= (LocationKeyphrase.apply \"the Lincoln Square location\")))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Stacy\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"apartment viewing\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberAM :number ^Long 10L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"the Lincoln Square location\")))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Stacy\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put an apartment viewing with Stacy tomorrow morning at 10 am at the Lincoln Square location","tokens":["Put","an","apartment","viewing","with","Stacy","tomorrow","morning","at","10","am","at","the","Lincoln","Square","location"]},"agent_utterance":{"described_entities":["entity@707808893"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Stacy\")))))) :location (?= #(LocationKeyphrase \"the Lincoln Square location\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberAM :number #(Number 10.0)))) :subject (?= #(String \"apartment viewing\"))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (^(Event) ConstraintTypeIntension) (Event.location_? (?= (LocationKeyphrase.apply \"Lincoln Park\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (^(Event) ConstraintTypeIntension) :new ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Lincoln Park\"))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"can you change that location to the Lincoln Park location?","tokens":["can","you","change","that","location","to","the","Lincoln","Park","location","?"]},"agent_utterance":{"described_entities":["entity@1955984068"],"original_text":"How's this?","tokens":["How","'s","this","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (Constraint[Constraint[Event]]) :new (Constraint[Event] :location (?= #(LocationKeyphrase \"Lincoln Park\"))))))"}},{"lispress":"(let (x0 (DateAtTimeWithDefaults (Tomorrow) (NumberPM 12L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (& (Event.subject_? (?= \"meeting my friends\")) (Event.start_? (?= x0))) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 3L))))) (Event.location_? (?= (LocationKeyphrase.apply \"library\"))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 12L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"meeting my friends\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0))) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 3L))))) :c2 ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"library\"))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Can you add meeting my friends tomorrow from 12 pm until 3 pm at the library","tokens":["Can","you","add","meeting","my","friends","tomorrow","from","12","pm","until","3","pm","at","the","library"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(let (x0 (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 12)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 3)))) :location (?= #(LocationKeyphrase \"library\")) :start (?= x0) :subject (?= #(String \"meeting my friends\")))))))","do-not-train":""}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.location_? (?= (LocationKeyphrase.apply \"Starbucks\"))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"Starbucks\"))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"I need to update that to Starbucks","tokens":["I","need","to","update","that","to","Starbucks"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed the location of meeting my friends to Starbucks.","tokens":["I","'ve","changed","the","location","of","meeting","my","friends","to","Starbucks","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :location (?= #(LocationKeyphrase \"Starbucks\"))))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"viewing\")))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"viewing\")))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When is my viewing ?","tokens":["When","is","my","viewing","?"]},"agent_utterance":{"described_entities":[],"original_text":"It's tomorrow at 10:00 AM.","tokens":["It","'s","tomorrow","at","10",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"viewing\"))))))))"}}],"tags":{}}
{"dialogue_id":"d07f6ec4-a340-4366-abad-eb39d5f4f555","turns":[{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"video game night\")) (Event.attendees_? (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jack\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Curtis\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Dee\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"video game night\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jack\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Curtis\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Dee\")))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"When is my video game night with Jack, Curtis and Dee?","tokens":["When","is","my","video","game","night","with","Jack",",","Curtis","and","Dee","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event \"video game night\" with Jack, Curtis, and Dee is on Friday the 23rd at 9:00 PM.","tokens":["The","event","\"","video","game","night","\"","with","Jack",",","Curtis",",","and","Dee","is","on","Friday","the","23","rd","at","9",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jack\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Curtis\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Dee\")))) :subject (?~= #(String \"video game night\"))))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (& (Event.subject_? (?~= \"paintball game\")) (Event.attendees_? (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Shelly\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Marcel\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Anna\")))))) (FullMonthofMonth (NextMonth))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"paintball game\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Shelly\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Marcel\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Anna\")))))) :range ^(Constraint Date) (FullMonthofMonth :month ^Month (NextMonth))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Delete my paintball game with Shelly, Marcel, and Anna next month","tokens":["Delete","my","paintball","game","with","Shelly",",","Marcel",",","and","Anna","next","month"]},"agent_utterance":{"described_entities":["entity@45210059"],"original_text":"Is this what you want me to cancel?","tokens":["Is","this","what","you","want","me","to","cancel","?"]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Shelly\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Marcel\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Anna\")))) :subject (?~= #(String \"paintball game\"))) :range (FullMonthofMonth :month (NextMonth))))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.date_? (?= (MD 21L (October))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 21L :month ^Month (October))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes, move it to October 21 instead.","tokens":["Yes",",","move","it","to","October","21","instead","."]},"agent_utterance":{"described_entities":["entity@370326616"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 21) :month #(Month \"OCTOBER\"))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.end_? (DateTime.time_? (?= (NumberPM 6L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 6L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"It should go until 6 pm.","tokens":["It","should","go","until","6","pm","."]},"agent_utterance":{"described_entities":["entity@690163114"],"original_text":"Does this look right?","tokens":["Does","this","look","right","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :end (Constraint[DateTime] :time (?= (NumberPM :number #(Number 6))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"That's what I was looking for!","tokens":["That","'s","what","I","was","looking","for","!"]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"paintball game\" to be.","tokens":["I","'ve","changed","\"","paintball","game","\"","to","be","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}}],"tags":{}}
{"dialogue_id":"c35a697c-d61d-41d9-8dad-7ad7617864a2","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (& (Event.subject_? (?= \"Book Club\")) (Event.start_? (?= (DateAtTimeWithDefaults (MD 7L (December)) (NumberPM 7L))))) (Event.attendees_? (& (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lucy\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Shellie\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barb\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jessica\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Book Club\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (MD :day ^Long 7L :month ^Month (December)) :time ^Time (NumberPM :number ^Long 7L))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lucy\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Shellie\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barb\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jessica\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Put Book Club on my calendar with Lucy, Shellie, Barb and Jessica for December 7th at 7 pm.","tokens":["Put","Book","Club","on","my","calendar","with","Lucy",",","Shellie",",","Barb","and","Jessica","for","December","7","th","at","7","pm","."]},"agent_utterance":{"described_entities":["entity@1829893004"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lucy\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Shellie\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barb\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jessica\"))))))) :start (?= (DateAtTimeWithDefaults :date (MD :day #(Number 7) :month #(Month \"DECEMBER\")) :time (NumberPM :number #(Number 7)))) :subject (?= #(String \"Book Club\"))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"That looks perfect.","tokens":["That","looks","perfect","."]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (DateTime.date_? (?= (Tomorrow)))) (Event.attendees_? (& (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Kim\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Elli\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jennifer\"))))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jake\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (Tomorrow)))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Kim\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Elli\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jennifer\"))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jake\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Please schedule a meeting with Kim, Elli, Jennifer, and Jake for tomorrow.","tokens":["Please","schedule","a","meeting","with","Kim",",","Elli",",","Jennifer",",","and","Jake","for","tomorrow","."]},"agent_utterance":{"described_entities":["entity@498823146"],"original_text":"Here are some times when everyone is free.","tokens":["Here","are","some","times","when","everyone","is","free","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Kim\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Elli\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jennifer\"))))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jake\"))))))) :start (Constraint[DateTime] :date (?= (Tomorrow)))))))"}},{"lispress":"(Yield (Execute (ChooseCreateEventFromConstraint (^(Event) EmptyStructConstraint) (refer (^(Dynamic) ActionIntensionConstraint)))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ChooseCreateEventFromConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint) :intension ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) ActionIntensionConstraint)))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"ok","tokens":["ok"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar tomorrow from 1:00 to 1:30 PM.","tokens":["I","'ve","put","that","on","your","calendar","tomorrow","from","1",":","00","to","1",":","30","PM","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ChooseCreateEventFromConstraint :constraint (Constraint[Event]) :intension (refer (ActionIntensionConstraint)))))"}},{"lispress":"(Yield (Event.start (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (& (Event.subject_? (?~= \"going over the exam\")) (Event.attendees_? (& (& (& (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Lucy\"))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Shellie\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Barb\")))) (AttendeeListHasRecipientConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jessica\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DateTime) Yield :output ^DateTime (Event.start :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"going over the exam\")) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Lucy\"))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Shellie\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Barb\")))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipientConstraint :recipientConstraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jessica\")))))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"When am I going over the exam with Lucy, Shellie, Barb and Jessica?","tokens":["When","am","I","going","over","the","exam","with","Lucy",",","Shellie",",","Barb","and","Jessica","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"going over the exam\" with Lucy, Shellie, Barb, and Jessica is on Friday at 11:00 AM.","tokens":["The","event","matching","\"","going","over","the","exam","\"","with","Lucy",",","Shellie",",","Barb",",","and","Jessica","is","on","Friday","at","11",":","00","AM","."]},"tags":{"original_lispress":"(Yield :output (:start (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :attendees (andConstraint (andConstraint (andConstraint (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Lucy\"))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Shellie\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Barb\")))) (AttendeeListHasRecipientConstraint :recipientConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jessica\")))) :subject (?~= #(String \"going over the exam\"))))))))"}}],"tags":{}}
{"dialogue_id":"e13deafd-658a-4e85-9f74-f4116e5dea1d","turns":[{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (nextDayOfMonth (Today) 23L) (^(Event) EmptyStructConstraint)))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 23L) :event ^(Constraint Event) (^(Event) EmptyStructConstraint)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"remove the event for 23rd from the callender","tokens":["remove","the","event","for","23","rd","from","the","callender"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events on Tuesday the 23rd.","tokens":["I","did","n't","find","any","events","on","Tuesday","the","23","rd","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (nextDayOfMonth (Today) #(Number 23)) :event (Constraint[Event])))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (nextDayOfMonth (Today) 23L) (Event.subject_? (?~= \"annual general meeting\"))))))) (Event.start_? (DateTime.date_? (?= (MD 7L (May))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 23L) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"annual general meeting\"))))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 7L :month ^Month (May))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"no i meant the annual general meeting ,chand the dates from 23rd to 7th may","tokens":["no","i","meant","the","annual","general","meeting",",","chand","the","dates","from","23","rd","to","7","th","may"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"annual general meeting\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","annual","general","meeting","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (nextDayOfMonth (Today) #(Number 23)) :event (Constraint[Event] :subject (?~= #(String \"annual general meeting\")))))))) :update (Constraint[Event] :start (Constraint[DateTime] :date (?= (MD :day #(Number 7) :month #(Month \"MAY\"))))))))"}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"general meeting\")) (Event.start_? (DateTime.date_? (?= (nextDayOfMonth (Today) 7L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"general meeting\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 7L))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"create and event for the general meeting on 7th","tokens":["create","and","event","for","the","general","meeting","on","7","th"]},"agent_utterance":{"described_entities":["entity@1797434527"],"original_text":"Does one of these work?","tokens":["Does","one","of","these","work","?"]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (Constraint[DateTime] :date (?= (nextDayOfMonth (Today) #(Number 7)))) :subject (?= #(String \"general meeting\"))))))"}},{"lispress":"(Yield (DeleteCommitEventWrapper (DeletePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (nextDayOfMonth (Today) 23L) (Event.subject_? (?~= \"general meeting\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(DeleteEventResponse) Yield :output ^DeleteEventResponse (DeleteCommitEventWrapper :event ^DeleteCommitEvent (DeletePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (nextDayOfMonth :date ^Date (Today) :day ^Long 23L) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"general meeting\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"now delete the general meeting event for 23rd","tokens":["now","delete","the","general","meeting","event","for","23","rd"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I didn't find any events named \"general meeting\" on your calendar.","tokens":["I","did","n't","find","any","events","named","\"","general","meeting","\"","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (DeleteCommitEventWrapper :event (DeletePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (nextDayOfMonth (Today) #(Number 23)) :event (Constraint[Event] :subject (?~= #(String \"general meeting\")))))))))))"}},{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"DC\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"DC\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"whats the wheather now at DC","tokens":["what","s","the","wheather","now","at","DC"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °F.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","F","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"DC\"))) :time (?= (Now))))"}}],"tags":{}}
{"dialogue_id":"72b01eb9-8448-41b5-9fa0-8fff008a873a","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Create an event for meeting with friends between 3-5pm","tokens":["Create","an","event","for","meeting","with","friends","between","3","-","5","pm"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)"}},{"lispress":"(let (x0 (NextTime (NumberPM 6L))) (Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= x0)) (Event.end_? (?= (TimeAfterDateTime x0 (NumberPM 11L)))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^DateTime (NextTime :time ^Time (NumberPM :number ^Long 6L))) ^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference x0)) :c2 ^(Constraint Event) (Event.end_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (TimeAfterDateTime :dateTime x0 :time ^Time (NumberPM :number ^Long 11L)))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Create an event for traveling between 6pm to 11pm","tokens":["Create","an","event","for","traveling","between","6","pm","to","11","pm"]},"agent_utterance":{"described_entities":["entity@318662691"],"original_text":"Is this good?","tokens":["Is","this","good","?"]},"tags":{"original_lispress":"(let (x0 (NextTime :time (NumberPM :number #(Number 6)))) (Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :end (?= (TimeAfterDateTime :dateTime x0 :time (NumberPM :number #(Number 11)))) :start (?= x0))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Yes","tokens":["Yes"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar.","tokens":["I","'ve","put","that","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Thanks","tokens":["Thanks"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"05645637-ae63-499c-b3be-7a66d3779f40","turns":[{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"doctor's appointment\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"doctor's appointment\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Do I have a doctor's appointment tomorrow?","tokens":["Do","I","have","a","doctor","'s","appointment","tomorrow","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"doctor's appointment\" tomorrow.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","doctor","'s","appointment","\"","tomorrow","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"doctor's appointment\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"denist appointment\")) (NextWeekList))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"denist appointment\")) :range ^(Constraint Date) (NextWeekList))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have a denist appointment next week?","tokens":["Do","I","have","a","denist","appointment","next","week","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"denist appointment\" next week.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","denist","appointment","\"","next","week","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"denist appointment\"))) :range (NextWeekList))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventDuringRange (Event.subject_? (?~= \"football game\")) (ThisWeekend))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"football game\")) :range ^(Constraint Date) (ThisWeekend))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"OK. Do I have a football game coming up this weekend?","tokens":["OK",".","Do","I","have","a","football","game","coming","up","this","weekend","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, I found one event matching \"football game\" this weekend. It's on Saturday from 11:00 AM to 4:00 PM.","tokens":["Yes",",","I","found","one","event","matching","\"","football","game","\"","this","weekend",".","It","'s","on","Saturday","from","11",":","00","AM","to","4",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventDuringRange :event (Constraint[Event] :subject (?~= #(String \"football game\"))) :range (ThisWeekend))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventAfterDateTime (Event.subject_? (?~= \"basketball game\")) (Event.end (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"football game\")))))))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventAfterDateTime :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"basketball game\")) :dateTime ^DateTime (Event.end :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"football game\")))))))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Great. Do I have a basketball game coming up after the football game?","tokens":["Great",".","Do","I","have","a","basketball","game","coming","up","after","the","football","game","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events matching \"basketball game\" on your calendar after Saturday at 4:00 PM.","tokens":["No",",","I","did","n't","find","any","events","matching","\"","basketball","game","\"","on","your","calendar","after","Saturday","at","4",":","00","PM","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventAfterDateTime :dateTime (:end (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"football game\"))))))) :event (Constraint[Event] :subject (?~= #(String \"basketball game\"))))))) #(Number 0)))"}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (NextDOW (Friday)) (Event.subject_? (?~= \"presentation\")))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"presentation\")))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Is there a presentation scheduled for Friday?","tokens":["Is","there","a","presentation","scheduled","for","Friday","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events \"presentation\" on your calendar on Friday.","tokens":["No",",","I","did","n't","find","any","events","\"","presentation","\"","on","your","calendar","on","Friday","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :event (Constraint[Event] :subject (?~= #(String \"presentation\"))))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"a33c221c-bf86-4abc-b2ae-19c66dea8fc2","turns":[{"lispress":"(Yield (IsBusy (RecipientAvailability (& (Event.start_? (DateTime.date_? (?= (MD 18L (April))))) (Event.attendees_? (AttendeeListHasRecipient (toRecipient (CurrentUser))))) true)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (IsBusy :eventCandidates ^EventCandidatesWithAndWithoutConflicts (RecipientAvailability :eventConstraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.date_? :obj ^(Constraint Date) (^(Date) ?= :reference ^Date (MD :day ^Long 18L :month ^Month (April))))) :c2 ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (toRecipient :person ^Person (CurrentUser))))) :includingMe ^Boolean true)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Am I busy on April 18?","tokens":["Am","I","busy","on","April","18","?"]},"agent_utterance":{"described_entities":[],"original_text":"No. Here is the only time I found when you are free on Thursday.","tokens":["No",".","Here","is","the","only","time","I","found","when","you","are","free","on","Thursday","."]},"tags":{"original_lispress":"(Yield :output (IsBusy :eventCandidates (RecipientAvailability :eventConstraint (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (toRecipient (CurrentUser))) :start (Constraint[DateTime] :date (?= (MD :day #(Number 18) :month #(Month \"APRIL\"))))) :includingMe #(Boolean true))))"}}],"tags":{}}
{"dialogue_id":"6d49e966-a381-45e9-b442-4dd42f27fd4b","turns":[{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.start_? (?= (DateAtTimeWithDefaults (Tomorrow) (NumberPM 3L)))) (Event.showAs_? (?= (ShowAsStatus.OutOfOffice)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (Tomorrow) :time ^Time (NumberPM :number ^Long 3L)))) :c2 ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.OutOfOffice)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"Can you mark me as out of office tomorrow at 3 pm","tokens":["Can","you","mark","me","as","out","of","office","tomorrow","at","3","pm"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Out of Office.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Out","of","Office","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :showAs (?= #(ShowAsStatus \"OutOfOffice\")) :start (?= (DateAtTimeWithDefaults :date (Tomorrow) :time (NumberPM :number #(Number 3))))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.showAs_? (?= (ShowAsStatus.WorkingElsewhere))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.showAs_? :obj ^(Constraint ShowAsStatus) (^(ShowAsStatus) ?= :reference ^ShowAsStatus (ShowAsStatus.WorkingElsewhere))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Actually, since I will be still completing tasks, can you change that status to working elsewhere?","tokens":["Actually",",","since","I","will","be","still","completing","tasks",",","can","you","change","that","status","to","working","elsewhere","?"]},"agent_utterance":{"described_entities":[],"original_text":"I’ve set the status of the Appointment to Working Elsewhere.","tokens":["I","’ve","set","the","status","of","the","Appointment","to","Working","Elsewhere","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :showAs (?= #(ShowAsStatus \"WorkingElsewhere\"))))))"}},{"lispress":"(PleasantryAnythingElseCombined)","expansion_lispress":null,"fully_typed_lispress":"^Unit (PleasantryAnythingElseCombined)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Neat, thanks!","tokens":["Neat",",","thanks","!"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Let me know if there's anything else I can help you with.","tokens":["Let","me","know","if","there","'s","anything","else","I","can","help","you","with","."]},"tags":{"original_lispress":"(PleasantryAnythingElseCombined)"}}],"tags":{}}
{"dialogue_id":"782731ac-16dc-4653-ab98-a59e01d4d87e","turns":[{"lispress":"(FenceAttendee)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceAttendee)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"I need you to schedule a dinner with coworkers on 2/15 from 7 - 10 pm","tokens":["I","need","you","to","schedule","a","dinner","with","coworkers","on","2","/","15","from","7","-","10","pm"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"I can only look up names in your address book.","tokens":["I","can","only","look","up","names","in","your","address","book","."]},"tags":{"original_lispress":"(FenceAttendee)","do-not-train":""}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.start_? (DateTime.time_? (?= (NumberPM 8L)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (DateTime.time_? :obj ^(Constraint Time) (^(Time) ?= :reference ^Time (NumberPM :number ^Long 8L)))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":true,"turn_index":1,"user_utterance":{"original_text":"change the time to 8pm","tokens":["change","the","time","to","8","pm"]},"agent_utterance":{"described_entities":["entity@824743096"],"original_text":"I’ve encountered an error I haven’t been trained to handle. Can you try a different request?","tokens":["I","’ve","encountered","an","error","I","have","n’t","been","trained","to","handle",".","Can","you","try","a","different","request","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :start (Constraint[DateTime] :time (?= (NumberPM :number #(Number 8))))))))","do-not-train":""}},{"lispress":"(Yield (CreateCommitEventWrapper (CreatePreflightEventWrapper (& (Event.subject_? (?= \"Movie Night\")) (Event.start_? (?= (DateAtTimeWithDefaults (NextDOW (Friday)) (HourMinutePm 7L 30L))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(CreateEventResponse) Yield :output ^CreateEventResponse (CreateCommitEventWrapper :event ^CreateCommitEvent (CreatePreflightEventWrapper :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (^(String) ?= :reference ^String \"Movie Night\")) :c2 ^(Constraint Event) (Event.start_? :obj ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (DateAtTimeWithDefaults :date ^Date (NextDOW :dow ^DayOfWeek (Friday)) :time ^Time (HourMinutePm :hours ^Long 7L :minutes ^Long 30L))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":2,"user_utterance":{"original_text":"Schedule movie night for Friday night at 7:30 pm","tokens":["Schedule","movie","night","for","Friday","night","at","7",":","30","pm"]},"agent_utterance":{"described_entities":[],"original_text":"I've put that on your calendar. Your status is set to Busy.","tokens":["I","'ve","put","that","on","your","calendar",".","Your","status","is","set","to","Busy","."]},"tags":{"original_lispress":"(Yield :output (CreateCommitEventWrapper :event (CreatePreflightEventWrapper :constraint (Constraint[Event] :start (?= (DateAtTimeWithDefaults :date (NextDOW :dow #(DayOfWeek \"FRIDAY\")) :time (HourMinutePm :hours #(Number 7) :minutes #(Number 30.0)))) :subject (?= #(String \"Movie Night\"))))))","do-not-train":""}},{"lispress":"(let (x0 (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"Movie Night\")))))) (Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id x0) (Event.duration_? (?= (addDurations (Event.duration x0) (toHours 2))))))))","expansion_lispress":null,"fully_typed_lispress":"(let (x0 ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"Movie Night\")))))) ^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj x0) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj x0) :y ^Duration (toHours :hours ^Number 2))))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":3,"user_utterance":{"original_text":"Add two more hours to Movie Night.","tokens":["Add","two","more","hours","to","Movie","Night","."]},"agent_utterance":{"described_entities":[],"original_text":"Your Movie Night has been updated to 2 hours and 30 minutes.","tokens":["Your","Movie","Night","has","been","updated","to","2","hours","and","30","minutes","."]},"tags":{"original_lispress":"(let (x0 (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"Movie Night\"))))))) (Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id x0) :update (Constraint[Event] :duration (?= (addDurations (:duration x0) (toHours #(Number 2)))))))))","do-not-train":""}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.duration_? (?= (addDurations (Event.duration (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (toMinutes 45)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (addDurations :x ^Duration (Event.duration :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :y ^Duration (toMinutes :minutes ^Number 45)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Add an extra 45 minutes in case we watch Titanic","tokens":["Add","an","extra","45","minutes","in","case","we","watch","Titanic"]},"agent_utterance":{"described_entities":[],"original_text":"Your Movie Night has been updated to 1 hour and 15 minutes.","tokens":["Your","Movie","Night","has","been","updated","to","1","hour","and","15","minutes","."]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :duration (?= (addDurations (:duration (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) (toMinutes #(Number 45))))))))"}}],"tags":{}}
{"dialogue_id":"8d6178c8-42f9-4637-bc8d-93a6442e3fe7","turns":[{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDate (Tomorrow) (Event.subject_? (?~= \"convention\"))))))) (Event.attendees_? (& (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Maria\")))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Stan\")))))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Jane\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDate :date ^Date (Tomorrow) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"convention\"))))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Maria\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Stan\")))))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Jane\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"For the convention tomorrow add Maria and remove Stan and Jane","tokens":["For","the","convention","tomorrow","add","Maria","and","remove","Stan","and","Jane"]},"agent_utterance":{"described_entities":["entity@232171805"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDate :date (Tomorrow) :event (Constraint[Event] :subject (?~= #(String \"convention\")))))))) :update (Constraint[Event] :attendees (andConstraint (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Maria\")))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Stan\")))))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Jane\"))))))))))))"}},{"lispress":"(Yield (Execute (ReviseConstraint (refer (^(Dynamic) roleConstraint (Path.apply \"output\"))) (UpdateEventIntensionConstraint) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Susan\")))))) (AttendeeListExcludesRecipient (?= (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Maria\"))))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic Event) ReviseConstraint :rootLocation ^(CalflowIntension Dynamic) (^(Dynamic) refer :constraint ^(Constraint (CalflowIntension Dynamic)) (^(Dynamic) roleConstraint :path ^Path (Path.apply :inner ^String \"output\"))) :oldLocation ^(Constraint (CalflowIntension (Constraint Event))) (UpdateEventIntensionConstraint) :new ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Susan\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListExcludesRecipient :recipient ^(Constraint Recipient) (^(Recipient) ?= :reference ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Maria\"))))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Unfortunately, Susan will also be going and Maria is sick and can't make it.","tokens":["Unfortunately",",","Susan","will","also","be","going","and","Maria","is","sick","and","ca","n't","make","it","."]},"agent_utterance":{"described_entities":["entity@462702776"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ReviseConstraint :rootLocation (roleConstraint #(Path \"output\")) :oldLocation (UpdateEventIntensionConstraint) :new (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Susan\")))))) (AttendeeListExcludesRecipient :recipient (?= (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Maria\"))))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"That looks good.","tokens":["That","looks","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"convention\" to be without Stan, without Jane, Susan, and without Maria.","tokens":["I","'ve","changed","\"","convention","\"","to","be","without","Stan",",","without","Jane",",","Susan",",","and","without","Maria","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (Event.subject_? (?~= \"convention\")))))) (Event.duration_? (?= (toHours 4))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"convention\")))))) :update ^(Constraint Event) (Event.duration_? :obj ^(Constraint Duration) (^(Duration) ?= :reference ^Duration (toHours :hours ^Number 4))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"Update convention to make it 4 hours long.","tokens":["Update","convention","to","make","it","4","hours","long","."]},"agent_utterance":{"described_entities":["entity@121046804"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (singleton (:results (FindEventWrapperWithDefaults :constraint (Constraint[Event] :subject (?~= #(String \"convention\"))))))) :update (Constraint[Event] :duration (?= (toHours #(Number 4)))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (& (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"jane\")))))) (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"susan\")))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (^((List Attendee)) & :c1 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"jane\")))))) :c2 ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"susan\")))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"add jane and susan to it","tokens":["add","jane","and","susan","to","it"]},"agent_utterance":{"described_entities":["entity@2072428849"],"original_text":"How about now?","tokens":["How","about","now","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (andConstraint (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"jane\")))))) (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"susan\")))))))))))"}}],"tags":{}}
{"dialogue_id":"88c19396-87f5-4ea1-abf9-5915f59670ae","turns":[{"lispress":"(Yield (WeatherQueryApi (AtPlace (FindPlace (LocationKeyphrase.apply \"San Antonio, Texas\"))) (?= (Now))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(WeatherTable) Yield :output ^WeatherTable (WeatherQueryApi :place ^(Constraint Point) (AtPlace :place ^Place (FindPlace :keyphrase ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"San Antonio, Texas\"))) :time ^(Constraint DateTime) (^(DateTime) ?= :reference ^DateTime (Now))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":true,"turn_index":0,"user_utterance":{"original_text":"What is the current weather in Dallas, I mean San Antonio, Texas?","tokens":["What","is","the","current","weather","in","Dallas",",","I","mean","San","Antonio",",","Texas","?"]},"agent_utterance":{"described_entities":[],"original_text":"It is clear with a temperature of 0.00 °C right now.","tokens":["It","is","clear","with","a","temperature","of","0",".","00","°","C","right","now","."]},"tags":{"original_lispress":"(Yield :output (WeatherQueryApi :place (AtPlace :place (FindPlace :keyphrase #(LocationKeyphrase \"San Antonio, Texas\"))) :time (?= (Now))))","do-not-train":""}},{"lispress":"(Yield (> (size (QueryEventResponse.results (FindEventWrapperWithDefaults (& (EventDuringRange (Event.location_? (?= (LocationKeyphrase.apply \"San Antonio\"))) (ThisWeek)) (EventDuringRange (Event.location_? (?= (LocationKeyphrase.apply \"San Antonio\"))) (NextWeekList)))))) 0L))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (^(Long) > :x ^Long (^(Event) size :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (^(Event) & :c1 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"San Antonio\"))) :range ^(Constraint Date) (ThisWeek)) :c2 ^(Constraint Event) (EventDuringRange :event ^(Constraint Event) (Event.location_? :obj ^(Constraint LocationKeyphrase) (^(LocationKeyphrase) ?= :reference ^LocationKeyphrase (LocationKeyphrase.apply :inner ^String \"San Antonio\"))) :range ^(Constraint Date) (NextWeekList)))))) :y ^Long 0L))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Do I have any meetings scheduled in San Antonio for this week or next?","tokens":["Do","I","have","any","meetings","scheduled","in","San","Antonio","for","this","week","or","next","?"]},"agent_utterance":{"described_entities":[],"original_text":"No, I didn't find any events on your calendar.","tokens":["No",",","I","did","n't","find","any","events","on","your","calendar","."]},"tags":{"original_lispress":"(Yield :output (> (size (:results (FindEventWrapperWithDefaults :constraint (andConstraint (EventDuringRange :event (Constraint[Event] :location (?= #(LocationKeyphrase \"San Antonio\"))) :range (ThisWeek)) (EventDuringRange :event (Constraint[Event] :location (?= #(LocationKeyphrase \"San Antonio\"))) :range (NextWeekList)))))) #(Number 0)))"}}],"tags":{}}
{"dialogue_id":"bbb9744f-df57-4d7a-9124-221988468d69","turns":[{"lispress":"(FenceSpecify)","expansion_lispress":null,"fully_typed_lispress":"^Unit (FenceSpecify)","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":0,"user_utterance":{"original_text":"CHANGE THE EVENT OF TOMORROW","tokens":["CHANGE","THE","EVENT","OF","TOMORROW"]},"agent_utterance":{"described_entities":["entity@102333225"],"original_text":"Could you be more specific with your request?","tokens":["Could","you","be","more","specific","with","your","request","?"]},"tags":{"original_lispress":"(FenceSpecify)"}},{"lispress":"(Yield (Event.location (singleton (QueryEventResponse.results (FindEventWrapperWithDefaults (EventOnDateWithTimeRange (EventOnDate (Today) (Event.subject_? (?~= \"dinner\"))) (Night)))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(LocationKeyphrase) Yield :output ^LocationKeyphrase (Event.location :obj ^Event (^(Event) singleton :list ^(List Event) (QueryEventResponse.results :obj ^QueryEventResponse (FindEventWrapperWithDefaults :constraint ^(Constraint Event) (EventOnDateWithTimeRange :event ^(Constraint Event) (EventOnDate :date ^Date (Today) :event ^(Constraint Event) (Event.subject_? :obj ^(Constraint String) (?~= :reference ^String \"dinner\"))) :timeRange ^(Constraint Time) (Night)))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":1,"user_utterance":{"original_text":"Where is my dinner tonight?","tokens":["Where","is","my","dinner","tonight","?"]},"agent_utterance":{"described_entities":[],"original_text":"The event matching \"dinner\" tonight is located at Maggiano's.","tokens":["The","event","matching","\"","dinner","\"","tonight","is","located","at","Maggiano","'s","."]},"tags":{"original_lispress":"(Yield :output (:location (singleton (:results (FindEventWrapperWithDefaults :constraint (EventOnDateWithTimeRange :event (EventOnDate :date (Today) :event (Constraint[Event] :subject (?~= #(String \"dinner\")))) :timeRange (Night)))))))"}},{"lispress":"(Yield (UpdateCommitEventWrapper (UpdatePreflightEventWrapper (Event.id (Execute (refer (extensionConstraint (^(Event) EmptyStructConstraint))))) (Event.attendees_? (AttendeeListHasRecipient (Execute (refer (extensionConstraint (RecipientWithNameLike (^(Recipient) EmptyStructConstraint) (PersonName.apply \"Adam\"))))))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(UpdateEventResponse) Yield :output ^UpdateEventResponse (UpdateCommitEventWrapper :event ^UpdateCommitEvent (UpdatePreflightEventWrapper :id ^EventId (Event.id :obj ^Event (^(Event) Execute :intension ^(CalflowIntension Event) (^(Event) refer :constraint ^(Constraint (CalflowIntension Event)) (^(Event) extensionConstraint :constraint ^(Constraint Event) (^(Event) EmptyStructConstraint))))) :update ^(Constraint Event) (Event.attendees_? :obj ^(Constraint (List Attendee)) (AttendeeListHasRecipient :recipient ^Recipient (^(Recipient) Execute :intension ^(CalflowIntension Recipient) (^(Recipient) refer :constraint ^(Constraint (CalflowIntension Recipient)) (^(Recipient) extensionConstraint :constraint ^(Constraint Recipient) (RecipientWithNameLike :constraint ^(Constraint Recipient) (^(Recipient) EmptyStructConstraint) :name ^PersonName (PersonName.apply :name ^String \"Adam\"))))))))))","program_execution_oracle":{"has_exception":true,"refer_are_correct":true},"skip":false,"turn_index":2,"user_utterance":{"original_text":"Add Adam to the event","tokens":["Add","Adam","to","the","event"]},"agent_utterance":{"described_entities":["entity@1205636872"],"original_text":"How is this?","tokens":["How","is","this","?"]},"tags":{"original_lispress":"(Yield :output (UpdateCommitEventWrapper :event (UpdatePreflightEventWrapper :id (:id (Execute :intension (refer (extensionConstraint (Constraint[Event]))))) :update (Constraint[Event] :attendees (AttendeeListHasRecipient :recipient (Execute :intension (refer (extensionConstraint (RecipientWithNameLike :constraint (Constraint[Recipient]) :name #(PersonName \"Adam\"))))))))))"}},{"lispress":"(Yield (Execute (^(Dynamic) ConfirmAndReturnAction)))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Dynamic) Yield :output ^Dynamic (^(Dynamic) Execute :intension ^(CalflowIntension Dynamic) (^(Dynamic) ConfirmAndReturnAction)))","program_execution_oracle":{"has_exception":false,"refer_are_correct":true},"skip":false,"turn_index":3,"user_utterance":{"original_text":"That looks good.","tokens":["That","looks","good","."]},"agent_utterance":{"described_entities":[],"original_text":"I've changed \"dinner\" to be Adam.","tokens":["I","'ve","changed","\"","dinner","\"","to","be","Adam","."]},"tags":{"original_lispress":"(Yield :output (Execute :intension (ConfirmAndReturnAction)))"}},{"lispress":"(Yield (PlaceHasFeature (PlaceFeature.OutdoorDining) (Execute (refer (extensionConstraint (^(Place) EmptyStructConstraint))))))","expansion_lispress":null,"fully_typed_lispress":"^Unit (^(Boolean) Yield :output ^Boolean (PlaceHasFeature :feature ^PlaceFeature (PlaceFeature.OutdoorDining) :place ^Place (^(Place) Execute :intension ^(CalflowIntension Place) (^(Place) refer :constraint ^(Constraint (CalflowIntension Place)) (^(Place) extensionConstraint :constraint ^(Constraint Place) (^(Place) EmptyStructConstraint))))))","program_execution_oracle":{"has_exception":false,"refer_are_correct":false},"skip":false,"turn_index":4,"user_utterance":{"original_text":"Does Maggiano's have outside seating?","tokens":["Does","Maggiano","'s","have","outside","seating","?"]},"agent_utterance":{"described_entities":[],"original_text":"Yes, Maggiano's Little Italy has outdoor dining.","tokens":["Yes",",","Maggiano","'s","Little","Italy","has","outdoor","dining","."]},"tags":{"original_lispress":"(Yield :output (PlaceHasFeature :feature #(PlaceFeature \"OutdoorDining\") :place (Execute :intension (refer (extensionConstraint (Constraint[Place]))))))"}}],"tags":{}}
